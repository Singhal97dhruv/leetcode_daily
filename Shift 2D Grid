Given a 2D grid of size m x n and an integer k. You need to shift the grid k times.

In one shift operation:

Element at grid[i][j] moves to grid[i][j + 1].
Element at grid[i][n - 1] moves to grid[i + 1][0].
Element at grid[m - 1][n - 1] moves to grid[0][0].
Return the 2D grid after applying shift operation k times.


class Solution {
public:
    vector<vector<int>> shiftGrid(vector<vector<int>>& grid, int k) {
        
        int rows=grid.size();
        int cols=grid[0].size();
        int total =rows*cols;
        vector<vector<int>>vect(rows,vector<int>(cols,0));
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                int temp=i*cols+j;
                int f1=(temp+k)%total;
                int nr=f1/cols;
                int nc=f1%cols;
                vect[nr][nc]=grid[i][j];
            }
        }
        return vect;
    }
};
